[
   {
     "id": 0,
     "title": "Utilize injeção de dependência e inversão de controle",
     "subtitle": "Sempre que possível utilize injeção de dependência, ele vai tornar seu código mais limpo e desacoplado.",
     "goodCode": "public class Controller\r\n{\r\n    private readonly ICalculationService _calculationService;\r\n\t\r\n    public Controller(ICalculationService calculationService)\r\n    {\r\n        _calculationService = calculationService ?? throw new ArgumentNullException(nameof(calculationService));\r\n    }\r\n\t\r\n    public decimal SumValues(decimal valueA, decimal valueB) => _calculationService.Sum(valueA, valueB);\r\n}\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var controller = new Controller(new calculationService());\r\n        decimal result = controller.SumValues(4 , 6);\r\n        Console.WriteLine(result); \/\/ Print value: 10\r\n    }\r\n}",
     "badCode": "public class Controller\r\n{\r\n    pivate readonly ICalculationService _calculationService;\r\n\t\r\n    public Controller()\r\n    {\r\n        _calculationService = new CalculationService(...other dependencies);\r\n    }\r\n\t\r\n    public decimal SumValues(decimal valueA, decimal valueB) => _calculationService.Sum(valueA, valueB);\r\n}"
   },
   {
     "id": 1,
     "title": "Lei de Demeter",
     "subtitle": "A Lei de Demeter (LoD) ou princípio do menor conhecimento é um princípio que prega os seguintes pontos. </br>- Cada unidade deve ter conhecimento limitado sobre outras unidades. </br>- Apenas unidades próximas se relacionam. </br>- Cada unidade deve apenas conversar com seus amigos. \n Não fale com estranhos, apenas fale com seus amigos imediatos",
     "goodCode": "public class Order() \r\n{ \r\n    public Discount Discount { get; set; }\r\n\r\n    public void Place() \r\n    {\r\n        Discount?.Apply();\r\n    }\r\n}\r\n\r\npublic class OrderHandler() \r\n{\r\n    var order = new Order();\r\n    order.Place();\r\n}",
     "badCode": "public class Order() \r\n{ \r\n    public Discount Discount { get; set; }\r\n}\r\n\r\npublic class Discount() \r\n{ \r\n    public decimal Amount { get; set; }\r\n\r\n    public void Apply() { ... }\r\n}\r\n\r\npublic class OrderHandler() \r\n{\r\n    var order = new Order();\r\n    order.Discount.Apply(); \/\/ <-\r\n}"
   },
   {
     "id": 2,
     "title": "Preste atenção à estrutura e respeite-a",
     "subtitle": "Respeite os padrões, as camadas, as nomeclaturas. Siga sempre o padrão.",
     "goodCode": "",
     "badCode": ""
   },
   {
     "id": 3,
     "title": "Evite tipos primitivos",
     "subtitle": "Utilize objetos de valor (Value Objects) para tornar o código mais limpo.",
     "goodCode": "\/\/ Value Object\r\npublic class Email \r\n{\r\n    public string Address { get; set; }\r\n\r\n    public Email \r\n    {\r\n        \/\/ Valida E-mail\r\n    }\r\n}\r\n\r\npublic class Customer \r\n{\r\n    public Email Email { get; set; }\r\n}\r\n\r\npublic class Employee \r\n{\r\n    public Email Email { get; set; }\r\n}",
     "badCode": "public class Customer \r\n{\r\n    public string Email { get; set; }\r\n\r\n    public Customer \r\n    {\r\n        \/\/ Valida E-mail\r\n    }\r\n}\r\n\r\npublic class Employee \r\n{\r\n    public string Email { get; set; }\r\n\r\n    public Customer \r\n    {\r\n        \/\/ Valida E-mail novamente\r\n    }\r\n}"
   },
   {
     "id": 4,
     "title": "Evite dependências lógicas",
     "subtitle": "Não escreva métodos cujo funcionamento correto dependa de algo contido em sua classe.",
     "goodCode": "public class Student \r\n{\r\n    ...\r\n}\r\n\r\npublic class Subscriber : Student\r\n{\r\n    public void Xpto() \r\n    {\r\n        ...        \r\n    }\r\n}",
     "badCode": "public class Student \r\n{\r\n    public bool IsSubscriber { get; set; }\r\n\r\n    public void Xpto() \r\n    {\r\n        if(IsSubscriber)\r\n            ... \/\/ S\u00F3 executa se for assinante   \r\n    }\r\n}"
   },
   {
     "id": 5,
     "title": "Declare funções de cima para baixo",
     "subtitle": "Ordenar as funções também é importante. Além da sua ordem de grandeza, suas assinaturas também devem ter uma boa oganização.",
     "goodCode": "public void CreateCustomer(string name) { ... } \r\n\r\npublic void CreateCustomer(string name, int age) { ... } \r\n\r\npublic void CreateCustomer(string name, int age, Address address) { ... } \r\n\r\n\r\npublic void UpdateCustomer(string name) { ... }\r\n\r\npublic void UpdateCustomer(string name, int age, Address address) { ... }",
     "badCode": "public void CreateCustomer(string name, int age, Address address) { ... } \r\n\r\npublic void CreateCustomer(string name) { ... } \r\n\r\npublic void UpdateCustomer(string name) { ... }\r\n\r\npublic void CreateCustomer(string name, int age) { ... } \r\n\r\npublic void UpdateCustomer(string name, int age, Address address) { ... }"
   },
   {
    "id": 6,
    "title": "As classes devem ser pequenas",
    "subtitle": "O tamanho da classe é medido por sua responsabilidade. Seguindo o princípio da Responsabilidade Única, uma classe deve ser pequena.",
    "goodCode": "class Dashboard {\r\n  void Disable() { \/* ... *\/ }\r\n  void Enable() { \/* ... *\/ }\r\n  string GetVersion() { \/* ... *\/ }\r\n}\r\n\r\n\/\/ Divida o responsabilidades movendo os m\u00E9todos restantes para outras classes",
    "badCode": "class Dashboard {\r\n  void ShowProgress() { \/* ... *\/ }\r\n  void HideProgress() { \/* ... *\/ }\r\n  bool IsDirty() { \/* ... *\/ }\r\n  void Disable() { \/* ... *\/ }\r\n  void Enable() { \/* ... *\/ }\r\n  void AddSubscription() { \/* ... *\/ }\r\n  void RemoveSubscription() { \/* ... *\/ }\r\n  void UpdateProfile() { \/* ... *\/ }\r\n  string GetVersion() { \/* ... *\/ }\r\n}"
  },
  {
    "id": 7,
    "title": "Alta coesão e baixo acoplamento",
    "subtitle": "A coesão define o grau em que os membros da classe se relacionam uns com os outros. </br>O acoplamento refere-se a como as duas classes são relacionadas ou dependentes uma em relação à outra. As classes são consideradas de baixo acoplamento se as mudanças em uma delas não afetarem a outra. </br>Um bom design de software tem alta coesão e baixo acoplamento.",
    "goodCode": "class UserService\r\n{\r\n    UserService(Repository userRepository) { }\r\n\r\n    async Task getUser(int userId)\r\n    {\r\n        return await userRepository.findOne(id);\r\n    }\r\n\r\n    async Task getTransactions(int userId)\r\n    {\r\n        return await userRepository.transactions.findOne(id);\r\n    }\r\n}\r\n\r\nclass UserService\r\n{\r\n    UserService(EmailSender emailSender) { }\r\n\r\n    async Task sendGreeting()\r\n    {\r\n        await emailSender.send('Welcome!');\r\n    }\r\n\r\n    async Task sendNotification(string message)\r\n    {\r\n        await emailSender.send(message);\r\n    }\r\n}",
    "badCode": "class UserManager\r\n{\r\n    UserManager(Repository userRepository, EmailSender emailSender) { }\r\n\r\n    async Task getUser(int userId) {\r\n        return await userRepository.findOne(id);\r\n    }\r\n\r\n    async Task getTransactions(int userId)\r\n    {\r\n        return await userRepository.transactions.findOne(id);\r\n    }\r\n\r\n    async Task sendGreeting() {\r\n        await emailSender.send('Welcome!');\r\n    }\r\n\r\n    async Task sendNotification(string message) {\r\n        await emailSender.send(message);\r\n    }\r\n}"
  },
  {
    "id": 8,
    "title": "Prefira composição em vez de herança",
    "subtitle": "Conforme declarado em Design Patterns da Gang of Four, você deve preferir composição em vez de herança onde puder. </br>Quando usar Herança: </br>1. Sua herança representa um relacionamento 'é um' e não um relacionamento 'tem um' (Humano-> Animal vs. Usuário-> UserDetails). </br>2. Você pode reutilizar o código das classes base (os humanos podem se mover como todos os animais). </br>Você deseja fazer alterações globais nas classes derivadas, alterando uma classe base. (Mude o gasto calórico de todos os animais quando eles se movem).",
    "goodCode": "class Customer\r\n{\r\n    public Customer(string name, string email) { }\r\n\r\n    public CustomerTaxData customerTaxData { get; init; }\r\n}\r\n\r\nclass CustomerTaxData\r\n{\r\n    public CustomerTaxData(long registrationNumber) { }\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{\r\n    var test = new Customer(\"customerNameTest\", \"customer@email.com\")\r\n    {\r\n        customerTaxData = new CustomerTaxData(155655)\r\n    };\r\n}",
    "badCode": "class Customer\r\n{\r\n    public Customer(string name, string email)\r\n    {\r\n\r\n    }\r\n}\r\n\r\n\/\/ Bad because Customer \"have\" tax data. CustomerTaxData is not a type of Customer\r\nclass CustomerTaxData : Customer\r\n{\r\n    CustomerTaxData(string name, string email) : base(name, email) { }\r\n}"
  } ,
  {
    "id": 9,
    "title": "Use encadeamento de métodos",
    "subtitle": "Esse padrão é muito útil e comumente usado em muitas bibliotecas. Ele permite que seu código seja expressivo e menos prolixo. Por esse motivo, use o encadeamento de métodos e observe como seu código ficará limpo.",
    "goodCode": "var query = new QueryBuilder()\r\n  .from(\"users\")\r\n  .page(1, 100)\r\n  .orderBy(\"firstName\", \"lastName\")\r\n  .build();",
    "badCode": "var queryBuilder = new QueryBuilder();\r\nqueryBuilder.from(\"users\");\r\nqueryBuilder.page(1, 100);\r\nqueryBuilder.orderBy(\"firstName\", \"lastName\");\r\nvar query = queryBuilder.build();"
  }
 ]